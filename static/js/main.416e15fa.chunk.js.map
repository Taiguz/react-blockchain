{"version":3,"sources":["components/Main/style.tsx","components/Block/style.tsx","components/Block/index.tsx","components/Miner/style.tsx","class/Block/index.ts","components/Miner/index.tsx","components/Main/index.tsx","class/BlockChain/index.ts","index.tsx"],"names":["Container","styled","div","BlocksContainer","ButtonContainer","Button","button","Input","input","BlockStyled","Invalid","span","Valid","BlockComponent","data","useState","block","editing","setEditing","someData","newData","setNewData","blockNumber","timestamp","toISOString","invalid","value","onChange","event","target","JSON","stringify","onClick","previousHash","hash","Overlay","MinerRow","MinerContent","Strong","SimpleBlock","nonce","this","Date","generateHash","SHA256","toString","Miner","props","blockData","setBlockData","blockMined","setBlockMined","logs","setLogs","mining","setMining","elapsedTime","setElapsedTime","hashContent","useRef","newBlock","interval","intervalLogs","checkHash","slice","difficulty","Array","fill","join","useEffect","current","setInterval","e","clearInterval","l","scrollTo","scrollHeight","length","mine10BlocksSync","a","console","log","intervals","index","inicio","v4","final","push","getTime","media","reduce","previous","hour","Math","floor","minutes","seconds","padStart","sanitizeTime","placeholder","evento","disabled","searchHash","setTimeout","ref","map","addBlock","setShow","blockChain","blocks","findIndex","searchInvalidBlock","Main","blockChainBlocks","setBlockChainBlocks","setDifficulty","showMiner","setShowMiner","invalidBlock","setInvalidBlock","show","lastBlock","Block","alert","htmlFor","id","type","Number","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.416e15fa.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    background-color: black;\n    margin: 0;\n    padding: 0;\n    width: 100vw;\n    height: 100vh;\n    label {\n        color: white;\n    }\n`\nexport const BlocksContainer = styled.div`\n    width: 100%;\n    height: 90%;\n    overflow-y: auto;\n    padding: 20px;\n    box-sizing: border-box;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: column;\n`\n\nexport const ButtonContainer = styled.div`\n    width: 100%;\n    height: 10%;\n    padding: 20px;\n    box-sizing: border-box;\n    border-top: 1px solid white;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    > * {\n        margin-right: 10px;\n\n    }\n\n`\n\nexport const Button = styled.button`\n    color: white;\n    border: 1px solid white;\n    padding: 10px;\n    background-color: black;\n    cursor: pointer;\n    transition: transform 0.3s ease;\n    :hover {\n        transform: scale(1.1);\n    }\n    :active {\n        transform: scale(1);\n    }\n    :disabled {\n        border 1px solid grey;\n        transform: scale(1);\n        cursor: default;\n    }\n`\n\nexport const Input = styled.input`\n    color: white;\n    border: 1px solid white;\n    padding: 10px;\n    background-color: black;\n`","import styled from 'styled-components'\n\nexport const BlockStyled = styled.div`\n    border: 1px solid white;\n    padding: 20px;\n    color: white;\n    font-size: 20px;\n    min-width: 80%;\n    height: 300px;\n    margin-bottom: 20px;\n`\n\nexport const Invalid = styled.span`\n    font-weight: bolder;\n    color: red;\n    border: 1px solid red;\n    padding: 5px;\n`\n\nexport const Valid = styled.span`\n    font-weight: bolder;\n    color: green;\n    border: 1px solid green;\n    padding: 5px;\n`","import React, { useEffect, useState } from 'react'\nimport { Block} from '../../class/Block/types'\nimport { Button, Input } from '../Main/style'\nimport { BlockStyled, Invalid, Valid } from './style'\n\ninterface BlockProps extends Block{\n    invalid: boolean\n}\n\nconst BlockComponent: React.FC<BlockProps> = (data: BlockProps) => {\n\n    const [block, setBlock] = useState<Block>(data)\n    const [editing, setEditing] = useState(false)\n    const [newData, setNewData] = useState(block.data.someData)\n\n    //Saves the new data from the user input\n    const saveData = () => {\n        setEditing(editing => {\n            editing = !editing\n            if(editing === false)\n                data.data.someData = newData\n            return editing\n        })\n    }\n\n\n    return (\n        <BlockStyled>\n            <h5>Block Number - #{block.blockNumber} - {block.timestamp.toISOString()} {data.invalid ? <Invalid>Block Invalid!</Invalid> : <Valid>Block Valid</Valid>}</h5>\n            <hr/>\n            <p>{editing ? <Input value={newData} onChange={event => setNewData(event.target.value)}/> : JSON.stringify(block.data)} <Button onClick={saveData}>{editing ? 'Save' : 'Edit Block Data'}</Button></p>\n            <hr/>\n            <h6>Previous Hash: {block.previousHash}</h6>\n            <h6>Block Hash: {block.hash}</h6>\n        </BlockStyled>\n    )\n}\n\nexport default BlockComponent","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    border: 1px solid white;\n    background-color: black;\n    color: white;\n    padding: 10px;\n    width: 60%;\n    height: 80%;\n\n`\nexport const Overlay = styled.div`\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgba(0,0,0,0.8);\n    z-index: 10;\n`\n\nexport const MinerRow = styled.div`\n    width: 100%;\n    height: 10%;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    > * {\n        margin-left: 10px;\n    }\n`\nexport const MinerContent = styled.div`\n    height: 62%;\n    width: 100%;\n    overflow-y: auto;\n`\n\nexport const Strong = styled.span`\n    font-weight: bolder;\n`","import { Block, BlockConstructor} from './types'\nimport { SHA256 } from 'crypto-js'\n\n//Implementing a blockchain block\nexport default class SimpleBlock implements Block {\n    blockNumber: number\n    timestamp: Date\n    data: { [key: string | number]: any}\n    hash: string\n    previousHash: string\n    nonce: number\n    constructor({blockNumber, data, previousHash, nonce}: BlockConstructor){\n        this.blockNumber = blockNumber\n        this.timestamp = new Date()\n        this.data = data\n        this.previousHash = previousHash ? previousHash : '0'\n        this.nonce = nonce ? nonce : 0\n        this.hash = this.generateHash()\n    }\n    //Generates a new hash for the block and updates the hash attribute\n    generateHash() {\n        this.hash =  SHA256(\n            this.blockNumber +\n            JSON.stringify(this.data) +\n            this.previousHash +\n            this.nonce).toString()\n        return this.hash\n    }\n\n}","import React, { useEffect, useRef, useState } from 'react'\nimport { Button, Input } from '../Main/style'\nimport { Container, MinerContent, MinerRow, Overlay, Strong } from './style'\nimport hash from 'crypto-js/sha256'\nimport hex from 'crypto-js/enc-hex'\nimport { Block } from '../../class/Block/types'\nimport SimpleBlock from '../../class/Block'\nimport { v4 } from 'uuid'\n\ninterface Props {\n    show: boolean\n    setShow: React.Dispatch<React.SetStateAction<boolean>>\n    blockNumber: number\n    previousHash: string\n    difficulty: number\n    addBlock: (newBlock: Block) => void\n}\n\nconst Miner: React.FC<Props> = (props: Props) => {\n\n    const [blockData, setBlockData] = useState('')\n    const [blockMined, setBlockMined] = useState<Block | null>(null)\n    const [logs, setLogs] = useState<{nonce: number, hash: string}[]>([])\n    const [mining, setMining] = useState(false)\n    const [elapsedTime, setElapsedTime] = useState(0)\n    const hashContent = useRef<HTMLDivElement | null>(null)\n    const [newBlock] = useState( new SimpleBlock({ \n            blockNumber: props.blockNumber,\n            data: {someData: blockData},\n            previousHash: props.previousHash,\n            nonce: 0\n    }))\n\n    const interval = useRef<NodeJS.Timeout | null>(null)\n    const intervalLogs = useRef<NodeJS.Timeout | null>(null)\n\n    //Check if the hash matches the difficulty set\n    const checkHash = (hash: string) =>  hash.slice(0, props.difficulty) === Array(props.difficulty).fill('0').join('')\n\n    useEffect(() => {\n        newBlock.data = { someData: blockData}\n    },[blockData])\n\n    //Increases the seconds counter every second\n    useEffect(() => {\n        if(mining)\n           interval.current = setInterval(() => setElapsedTime(e => e + 1), 1000)\n        else clearInterval(interval.current as NodeJS.Timeout)\n\n        return () => clearInterval(interval.current as NodeJS.Timeout)\n    },[mining])\n\n    //Output the hashes generated for the user every 200 milliseconds\n    useEffect(() => {\n        if(mining)\n           intervalLogs.current = setInterval(() => setLogs(l => [...l, { nonce: newBlock.nonce, hash: newBlock.hash}]), 200)\n        else clearInterval(intervalLogs.current as NodeJS.Timeout)\n\n        return () => clearInterval(intervalLogs.current as NodeJS.Timeout)\n    },[mining])\n\n\n\n    useEffect(() => {\n        if(hashContent.current)\n            hashContent.current.scrollTo(0,hashContent.current.scrollHeight)\n    },[logs.length, blockMined])\n\n\n    //Give a human readable output for time\n    const sanitizeTime = () => {\n        const hour = Math.floor((elapsedTime % 216000) / 3600)\n        const minutes = Math.floor((elapsedTime % 3600) / 60)\n        const seconds = elapsedTime % 60\n        return `${hour.toString().padStart(2,'0')}:${minutes.toString().padStart(2,'0')}:${seconds.toString().padStart(2,'0')}`\n    }\n\n    //Search for the hash with the number of zeros given by the difficulty\n    const mine = () => {\n        setMining(true)\n        const searchHash = () => {\n            newBlock.nonce++\n            newBlock.generateHash()\n            if(!checkHash(newBlock.hash)) \n                return setTimeout(searchHash,0)\n            setBlockMined(newBlock)\n            setMining(false)\n        }\n\n        searchHash()\n    }\n\n    //Syncronously mine 10 blocks, to calculate mean time to generate hashes\n    const mine10BlocksSync = async () => {\n        console.log('Started mining 10 blocks...')\n        const numberOfBlocks = 10\n        const intervals = []\n        for(let index = 0; index < numberOfBlocks; index++){\n            const inicio = new Date()\n            const newBlock = new SimpleBlock({ \n                blockNumber: props.blockNumber,\n                data: {someData: v4()},\n                previousHash: props.previousHash,\n                nonce: 0\n            })\n            while(!checkHash(newBlock.hash)){\n                newBlock.nonce++\n                newBlock.generateHash()\n            }\n            const final = new Date()\n            console.log('1 Block mined')\n            intervals.push(final.getTime() - inicio.getTime())\n        }\n        const media = intervals.reduce((previous, current) => previous + current) / numberOfBlocks\n        console.log(`Mean time to mine 10 blocks: ${media} milliseconds`)\n    }\n\n    //Add a new block to the blockchain\n    const addBlock = () => {\n        if(blockMined === null) return\n        props.addBlock(blockMined)\n        props.setShow(false)\n    }\n\n    return (\n        <Overlay>\n            <Container>\n                <MinerRow>\n                    <h2>Block Miner{mining && ' - mining...'} {(mining || blockMined) && `Elapsed time: ${sanitizeTime()}`}</h2>\n                </MinerRow>\n                <hr/>\n                <MinerRow>\n                    <Input \n                        placeholder=\"New block data...\"\n                        value={blockData}\n                        onChange={evento => setBlockData(evento.target.value)}\n                        disabled={mining}\n                    />\n                    <Button disabled={mining} onClick={mine}>{mining ? 'Mining...' : 'Mine New Block'}</Button>\n                </MinerRow>\n                <MinerContent ref={hashContent}>\n                    {logs.slice(-100).map(({ nonce, hash}, index) => <p key={index}><Strong>Nonce: </Strong>{nonce} <Strong>Hash: </Strong>{hash}</p>)}\n                    {blockMined && <h4>Block mined!! Hash found {blockMined.hash}</h4>}\n                </MinerContent>\n                <hr/>\n                <MinerRow>\n                    <Button disabled={blockMined === null} onClick={addBlock}>Add Block</Button>\n                    <Button disabled={mining} onClick={() => props.setShow(false)}>Cancel</Button>\n                    <Button onClick={mine10BlocksSync}>mine 10</Button>\n                </MinerRow>\n            </Container>\n        </Overlay>\n    )\n\n}\n\nexport default Miner","import React, { useState } from 'react'\nimport BlockComponent from '../Block'\nimport { Block } from '../../class/Block/types'\nimport Miner from '../Miner'\nimport { BlocksContainer, Button, ButtonContainer, Container, Input } from './style'\nimport { BlockChain } from '../../class/BlockChain/types'\nimport SimpleBlockChain from '../../class/BlockChain'\n\nconst blockChain = new SimpleBlockChain()\n\nconst Main: React.FC = () => {\n    const [blockChainBlocks, setBlockChainBlocks] = useState<Block[]>(blockChain.blocks)\n    const [difficulty, setDifficulty] = useState(2)\n    const [showMiner, setShowMiner] = useState(false)\n    const [invalidBlock, setInvalidBlock] = useState<number>(-1)\n\n\n    //Adds a new block to the blockchain\n    const addBlock = (newBlock: Block) => {\n        blockChain.addBlock(newBlock)\n        setBlockChainBlocks(blockChain.blocks)\n    }\n\n    //Check if blockchain is valid\n    const checkBlockChainValidation = () => {\n        const invalid = blockChain.searchInvalidBlock()\n        setInvalidBlock(invalid)\n        alert(invalid === -1 ? 'Block chain is valid !' : 'Block chain is invalid !' )\n    }\n\n    return (\n        <Container>\n            {showMiner && \n                <Miner \n                    show={showMiner} \n                    setShow={setShowMiner} \n                    blockNumber={blockChain.lastBlock().blockNumber + 1}\n                    previousHash={blockChain.lastBlock().hash}\n                    difficulty={difficulty}\n                    addBlock={addBlock}\n                />\n            }\n            <BlocksContainer>\n                {blockChainBlocks.map((block, index) => <BlockComponent key={index} invalid={invalidBlock !== -1 && index >= invalidBlock} {...block} />)}\n            </BlocksContainer>\n            <ButtonContainer>\n                <Button onClick={() => setShowMiner(true)}>+ Add New Block</Button>\n                <Button onClick={checkBlockChainValidation}>Check Block Chain Validation</Button>\n                <label htmlFor=\"diff\">Set Block Chain Difficulty:</label>\n                <Input id=\"diff\" type=\"number\" placeholder=\"Set Difficulty\" value={difficulty} onChange={event => setDifficulty(Number(event.target.value))}/>\n            </ButtonContainer>\n        </Container>\n    )\n}\n\nexport default Main","import SimpleBlock from \"../Block\";\nimport { Block } from \"../Block/types\";\nimport { BlockChain } from \"./types\";\n\n//Implementing a blockchain\nexport default class SimpleBlockChain implements BlockChain{\n    blocks: Block[]\n    constructor(){\n        this.blocks = []\n        //Adding a first block when the blockchain is created\n        this.addBlock(\n            new SimpleBlock({\n                blockNumber: 0,\n                data: { someData: 'the genesis block'}\n            }) )\n    }\n    addBlock(newBlock: Block){\n        this.blocks.push(newBlock)\n    }\n    searchInvalidBlock(){\n        return this.blocks.slice(1,this.blocks.length).findIndex((block, index) => {\n          //index is already the previous index\n          return block.previousHash !== this.blocks[index].generateHash()\n        })\n    }\n    checkBlockChainValidation() {\n        return this.searchInvalidBlock() === -1\n    }\n    lastBlock(){\n        return this.blocks[this.blocks.length - 1]\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}